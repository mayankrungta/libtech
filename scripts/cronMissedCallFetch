#! /usr/bin/env python

#This code will get the Oabcgatat Banes
import os
import csv
from bs4 import BeautifulSoup, Tag
import requests

import logging
import MySQLdb
import time
import re

#######################
# Global Declarations
#######################

logFile = __file__+'.log'
logLevel = logging.ERROR
logFormat = '%(asctime)s:[%(name)s|%(module)s|%(funcName)s|%(lineno)s|%(levelname)s]: %(message)s' #  %(asctime)s %(module)s:%(lineno)s %(funcName)s %(message)s"

#############
# Functions
#############

'''
def logInitialize():
  import logging
  logging.basicConfig(filename=logFile, level=logLevel, format=logFormat) # Mynk
  logging.basicConfig(
    filename = fileName,
    format = "%(levelname) -10s %(asctime)s %(module)s:%(lineno)s %(funcName)s %(message)s",
    level = logging.DEBUG
)
'''

def loggerFetch(level=None):
  logger = logging.getLogger(__name__)

  if level:
    numeric_level = getattr(logging, level.upper(), None)
    if not isinstance(numeric_level, int):
      raise ValueError('Invalid log level: %s' % level)
    else:
      logger.setLevel(numeric_level)
  else:
    logger.setLevel(logLevel)

  # create console handler and set level to debug
  ch = logging.StreamHandler()
  ch.setLevel(logging.DEBUG)    # Mynk ???

  # create formatter e.g - FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
  formatter = logging.Formatter(logFormat)

  # add formatter to ch
  ch.setFormatter(formatter)

  # add ch to logger
  logger.addHandler(ch)

  return logger

def loggerTest(logger):
  logger.debug('debug message')
  logger.info('info message')
  logger.warn('warn message')
  logger.error('error message')
  logger.critical('critical message')
    

def argsFetch():
  '''
  Paser for the argument list that returns the args list
  '''
  import argparse

  parser = argparse.ArgumentParser(description='Jobcard script for crawling, downloading & parsing')
  parser.add_argument('-v', '--verbose', help='Make the browser visible', required=False, action='store_const', const=1)
  parser.add_argument('-l', '--log-level', help='Log level defining verbosity', required=False)
  parser.add_argument('-t', '--timeout', help='Time to wait before a page loads', required=False)
  parser.add_argument('-b', '--browser', help='Specify the browser to test with', required=False)
  parser.add_argument('-u', '--url', help='Specify the url to crawl', required=False)
  parser.add_argument('-d', '--directory', help='Specify directory to download html file to', required=False)

  args = vars(parser.parse_args())
  return args

def parserFinalize(parser):
  parser.close()

def dbInitialize(host="localhost", user="root", passwd="root123", db="libtech"):
  '''
  Connect to MySQL Database
  '''
  db = MySQLdb.connect(host=host, user=user, passwd=passwd, db=db)
  db.autocommit(True)
  return db;

def dbFinalize(db):
  db.close()


def main():
  args = argsFetch()
  logger = loggerFetch(args.get('log_level'))
  # loggerTest(logger)
  logger.info('args: %s', str(args))

  dir = args.get('directory')

  libtech_db = dbInitialize(host="localhost", user="libtech", passwd="lt123", db="libtech")
  mahabubnagar_db = dbInitialize(host="localhost", user="mahabubnagar", passwd="mn123", db="mahabubnagar") 

  cur = libtech_db.cursor()
  query = 'select id, phone, ctime, htmlgen from ghattuMissedCalls'
  cur.execute(query)
  missedCalls = cur.fetchall()
  for  (id, phone, ctime, htmlgen) in missedCalls:
    logger.info("id = %s, phone = %s, ctime = %s, htmlgen = %s" % (id, phone, ctime, htmlgen))
    if "1400830" in phone:
      continue
    
    cur = mahabubnagar_db.cursor()
    query = "select jobcard from jobcardDetails where phone=" + phone
    logger.info("query[%s]" % query)
    
    cur.execute(query)
    if cur.rowcount != 0:
      for jobcards in cur.fetchall():
        jobcard = jobcards[0]
        logger.info("jobcard[%s]" % jobcard)

        filename = dir + '/' + str(id) + '_' + str(phone) + '.html'
        logger.info("filename[%s]" % filename)
        if os.path.isfile(filename):
          continue

        cmd = '~/libtech/scripts/fetch -j ' + jobcard + ' -m ' + phone + ' -i ' + str(id) + ' -d ' + dir
        logger.info("cmd[%s]" % cmd)
        os.system(cmd)

    else:
      cmd = '~/libtech/scripts/fetch -j 0 -m ' + phone + ' -i ' + str(id) + ' -d ' + dir
      logger.info("cmd[%s]" % cmd)
      os.system(cmd)

  #fetchJobcard(url, driver, logger, args, dir)
  

  dbFinalize(libtech_db)
  exit(0)

if __name__ == '__main__':
  main()
