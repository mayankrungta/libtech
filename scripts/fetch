#! /usr/bin/env python

#This code will get the Oabcgatat Banes
import os
import csv
from bs4 import BeautifulSoup
import requests

import logging
import MySQLdb
import time
import re

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By

#######################
# Global Declarations
#######################

delay = 2
timeout = 10
url="http://www.nrega.telangana.gov.in/"
browser="Firefox"
logFile = __file__+'.log'
logLevel = logging.ERROR
logFormat = '%(asctime)s:[%(name)s|%(levelname)s]: %(message)s'

#############
# Functions
#############

'''
def logInitialize():
  import logging
  logging.basicConfig(filename=logFile, level=logLevel, format=logFormat) # Mynk
'''

def loggerFetch(level='ERROR'):
  logger = logging.getLogger(__name__)

  if level:                     # Mynk ???
    numeric_level = getattr(logging, level.upper(), None)
    if not isinstance(numeric_level, int):
      raise ValueError('Invalid log level: %s' % level)
    else:
      logger.setLevel(numeric_level)
  else:
    logger.setLevel(logLevel)

  # create console handler and set level to debug
  ch = logging.StreamHandler()
  ch.setLevel(logging.DEBUG)    # Mynk ???

  # create formatter e.g - FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
  formatter = logging.Formatter(logFormat)

  # add formatter to ch
  ch.setFormatter(formatter)

  # add ch to logger
  logger.addHandler(ch)

  return logger

def loggerTest(logger):
  logger.debug('debug message')
  logger.info('info message')
  logger.warn('warn message')
  logger.error('error message')
  logger.critical('critical message')
    

def argsFetch():
  '''
  Paser for the argument list that returns the args list
  '''
  import argparse

  parser = argparse.ArgumentParser(description='Jobcard script for crawling, downloading & parsing')
  parser.add_argument('-v', '--visible', help='Make the browser visible', required=False, action='store_const', const=1)
  parser.add_argument('-l', '--log-level', help='Log level defining verbosity', required=False)
  parser.add_argument('-t', '--timeout', help='Time to wait before a page loads', required=False)
  parser.add_argument('-b', '--browser', help='Specify the browser to test with', required=False)
  parser.add_argument('-u', '--url', help='Specify the url to crawl', required=False)
  parser.add_argument('-j', '--jobcard', help='Specify the jobcard no to fetch', required=True)
  parser.add_argument('-d', '--directory', help='Specify directory to download html file to', required=False)

  args = vars(parser.parse_args())
  return args

def parserFinalize(parser):
  parser.close()


def displayInitialize(isVisible=0):
  from pyvirtualdisplay import Display
  
  display = Display(visible=isVisible, size=(600, 400))
  display.start()
  return display

def displayFinalize(display):
  display.stop()

def driverInitialize(browser="Firefox"):
  if browser == "Firefox":
    fp = webdriver.FirefoxProfile()
    fp.native_events_enabled = False
    fp.set_preference("browser.download.folderList",2)
    fp.set_preference("browser.download.manager.showWhenStarting",False)
    fp.set_preference("browser.download.dir", os.getcwd())
    fp.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/vnd.ms-excel")

    driver = webdriver.Firefox(fp)
  elif browser == "PhantomJS":
    driver = webdriver.PhantomJS()
    driver.set_window_size(1120, 550)
  else:
    driver = webdriver.Chrome()

  driver.implicitly_wait(10)

  return driver

def driverFinalize(driver):
  driver.close()


def wdTest(driver):
  driver.get("http://www.google.com")
  print driver.page_source.encode('utf-8')


def preText():
  '''
  Prefixing to the html file script
  '''
  text = '''<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<head>
<title>:: Job Card Holders Information ::</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />

<script language="javascript">

function muster()
{
	
var url="/Nregs/FrontServlet?requestType=HouseholdInf_engRH&amp;actionVal=musterrolls&amp;hhid=141975706007010167&amp;type=Normal";
  
window.open(url, "newWin", "width=800,height=600,directories=yes,location=yes,menubar=yes,scrollbars=yes,status=yes,toolbar=yes,resizable=yes");   
	
}
function doMenu(item) 
{
 	obj=document.getElementById(item);
 	col=document.getElementById("x" + item);
 	if (obj.style.display=="none") {
  		obj.style.display="block";
  		col.innerHTML="-";
 	}
 	else {
  		obj.style.display="none";
  		col.innerHTML="+";
 	}
 	
}

function doMenubody(item) 
{
 obj1=document.getElementById('main1');
 obj2=document.getElementById('main2');
 obj3=document.getElementById('main3');
 obj4=document.getElementById('main4');


 obj1.style.display=item;
 obj2.style.display=item;
 obj3.style.display=item;
 obj4.style.display=item;
}


 </script>   
</head>

<body onload="doMenubody('none');" style="position: relative; min-height: 100%; top: 0px;">
<script>
	window.resizeTo (screen.availWidth, screen.availHeight);
	window.moveTo (0, 0);
	window.history.forward(1);
</script>

'''
  return text

def postText():
  '''
  Suffixing to the html file script
  '''
  text = '''

<form action="./submit.php" method="POST">
Complaint Number: 	<input name="complaintNumber" type="text"></br>
Complaint Date: 	<input name="complaintDate" type="date" value="e.g 02-MAR-2014"></br>
Additional Details: <input name="additionalDetails" type="text"></br>

<p> NOTE: We can change the format as is necessary </p>

Current Step: <select name="currentStep">
<option value="1">Not Reachable</option>
<option value="1">Complaint Filed on Website</option>
<option value="1">Complaint Closed on website</option>
<option value="1">Closure Verfied Through Field</option>
</select><br>
Final Status: <select name="finalStatus">
<option value="1">Open</option>
<option value="2">Closed</option>
</select><br>
Reason for Complaint Closure: <select name="closureReason">
<option value="1">Phone not reachable for a long time</option>
<option value="2">Duplicate</option>
<option value="3">Verfied that Complaint Successfully Resolved</option>
</select><br>

<button type="submit" >Submit</button>
</form>

</body>
</html>
'''
  return text

def fetchJobcard(url, driver, logger, jobcard, dir="/root/libtech/ghattu/nrega/html"):
  '''
  Fetch the html for the jobcard
  '''
  #driver = wdFetch(driver, logger)
  driver.get(url)

  elem = driver.find_element_by_name("spl")
  elem.send_keys("JobCard")
  time.sleep(1)

  elem = driver.find_element_by_name("input2")
  elem.send_keys(jobcard)

  elem = driver.find_element_by_name("Go")
  elem.send_keys(Keys.RETURN)

  parent_handle = driver.current_window_handle
  # print "Handles : ", driver.window_handles, "Number : ", len(driver.window_handles)

  if len(driver.window_handles) == 2:
    driver.switch_to_window(driver.window_handles[-1])
  else:
    logger.error("Handlers gone wrong [" + str(driver.window_handles) + "]")
    driver.save_screenshot('./logs/button_'+jcno+'.png')

  html_source = driver.page_source
  # print driver.page_source.encode('utf-8')

  bs = BeautifulSoup(html_source)
  # table = bs.find('table',id='sortable')
  td = bs.find('td',attrs={'class':'rpt-bg'})

  html_text = preText()
  html_text += str(td)
  html_text += postText()

  with open(dir+'/'+str(jobcard)+'.html', 'w') as html_file:
    html_file.write(html_text)

  driver.close()
  driver.switch_to_window(parent_handle)

def main():
  args = argsFetch()
  logger = loggerFetch(args.get('log_level'))        # Mynk WTF is '_' doing here?
  # loggerTest(logger)
  logger.info('args: %s', str(args))

  display = displayInitialize(args['visible'])
  driver = driverInitialize(browser)

  # wdTest(driver)
  # jobcard = 141975706007010167
  fetchJobcard(url, driver, logger, args.get('jobcard'))

  driverFinalize(driver)
  displayFinalize(display)
  exit(0)

if __name__ == '__main__':
  main()
